/* tslint:disable */
/* eslint-disable */
/**
 * Work Order App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ItemCreate,
  ItemPublic,
  ItemUpdate,
  ItemsPublic,
  Message,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ItemCreateFromJSON,
    ItemCreateToJSON,
    ItemPublicFromJSON,
    ItemPublicToJSON,
    ItemUpdateFromJSON,
    ItemUpdateToJSON,
    ItemsPublicFromJSON,
    ItemsPublicToJSON,
    MessageFromJSON,
    MessageToJSON,
} from '../models/index';

export interface ItemsCreateItemRequest {
    itemCreate: ItemCreate;
}

export interface ItemsDeleteItemRequest {
    id: string;
}

export interface ItemsReadItemRequest {
    id: string;
}

export interface ItemsReadItemsRequest {
    skip?: number;
    limit?: number;
}

export interface ItemsUpdateItemRequest {
    id: string;
    itemUpdate: ItemUpdate;
}

/**
 * 
 */
export class ItemsApi extends runtime.BaseAPI {

    /**
     * Create new item.
     * Create Item
     */
    async itemsCreateItemRaw(requestParameters: ItemsCreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPublic>> {
        if (requestParameters['itemCreate'] == null) {
            throw new runtime.RequiredError(
                'itemCreate',
                'Required parameter "itemCreate" was null or undefined when calling itemsCreateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/items/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItemCreateToJSON(requestParameters['itemCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemPublicFromJSON(jsonValue));
    }

    /**
     * Create new item.
     * Create Item
     */
    async itemsCreateItem(requestParameters: ItemsCreateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPublic> {
        const response = await this.itemsCreateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an item.
     * Delete Item
     */
    async itemsDeleteItemRaw(requestParameters: ItemsDeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsDeleteItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Delete an item.
     * Delete Item
     */
    async itemsDeleteItem(requestParameters: ItemsDeleteItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.itemsDeleteItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get item by ID.
     * Read Item
     */
    async itemsReadItemRaw(requestParameters: ItemsReadItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPublic>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsReadItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemPublicFromJSON(jsonValue));
    }

    /**
     * Get item by ID.
     * Read Item
     */
    async itemsReadItem(requestParameters: ItemsReadItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPublic> {
        const response = await this.itemsReadItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve items.
     * Read Items
     */
    async itemsReadItemsRaw(requestParameters: ItemsReadItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemsPublic>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/items/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemsPublicFromJSON(jsonValue));
    }

    /**
     * Retrieve items.
     * Read Items
     */
    async itemsReadItems(requestParameters: ItemsReadItemsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemsPublic> {
        const response = await this.itemsReadItemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an item.
     * Update Item
     */
    async itemsUpdateItemRaw(requestParameters: ItemsUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ItemPublic>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling itemsUpdateItem().'
            );
        }

        if (requestParameters['itemUpdate'] == null) {
            throw new runtime.RequiredError(
                'itemUpdate',
                'Required parameter "itemUpdate" was null or undefined when calling itemsUpdateItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/items/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ItemUpdateToJSON(requestParameters['itemUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ItemPublicFromJSON(jsonValue));
    }

    /**
     * Update an item.
     * Update Item
     */
    async itemsUpdateItem(requestParameters: ItemsUpdateItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ItemPublic> {
        const response = await this.itemsUpdateItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
