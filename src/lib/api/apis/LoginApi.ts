/* tslint:disable */
/* eslint-disable */
/**
 * Work Order App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Message,
  NewPassword,
  Token,
  UserPublic,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageFromJSON,
    MessageToJSON,
    NewPasswordFromJSON,
    NewPasswordToJSON,
    TokenFromJSON,
    TokenToJSON,
    UserPublicFromJSON,
    UserPublicToJSON,
} from '../models/index';

export interface LoginLoginAccessTokenRequest {
    username: string;
    password: string;
    grantType?: string | null;
    scope?: string;
    clientId?: string | null;
    clientSecret?: string | null;
}

export interface LoginRecoverPasswordRequest {
    email: string;
}

export interface LoginRecoverPasswordHtmlContentRequest {
    email: string;
}

export interface LoginResetPasswordRequest {
    newPassword: NewPassword;
}

/**
 * 
 */
export class LoginApi extends runtime.BaseAPI {

    /**
     * OAuth2 compatible token login, get an access token for future requests
     * Login Access Token
     */
    async loginLoginAccessTokenRaw(requestParameters: LoginLoginAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Token>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling loginLoginAccessToken().'
            );
        }

        if (requestParameters['password'] == null) {
            throw new runtime.RequiredError(
                'password',
                'Required parameter "password" was null or undefined when calling loginLoginAccessToken().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['grantType'] != null) {
            formParams.append('grant_type', requestParameters['grantType'] as any);
        }

        if (requestParameters['username'] != null) {
            formParams.append('username', requestParameters['username'] as any);
        }

        if (requestParameters['password'] != null) {
            formParams.append('password', requestParameters['password'] as any);
        }

        if (requestParameters['scope'] != null) {
            formParams.append('scope', requestParameters['scope'] as any);
        }

        if (requestParameters['clientId'] != null) {
            formParams.append('client_id', requestParameters['clientId'] as any);
        }

        if (requestParameters['clientSecret'] != null) {
            formParams.append('client_secret', requestParameters['clientSecret'] as any);
        }

        const response = await this.request({
            path: `/api/v1/login/access-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenFromJSON(jsonValue));
    }

    /**
     * OAuth2 compatible token login, get an access token for future requests
     * Login Access Token
     */
    async loginLoginAccessToken(requestParameters: LoginLoginAccessTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Token> {
        const response = await this.loginLoginAccessTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Recovery
     * Recover Password
     */
    async loginRecoverPasswordRaw(requestParameters: LoginRecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling loginRecoverPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/password-recovery/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Password Recovery
     * Recover Password
     */
    async loginRecoverPassword(requestParameters: LoginRecoverPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.loginRecoverPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Content for Password Recovery
     * Recover Password Html Content
     */
    async loginRecoverPasswordHtmlContentRaw(requestParameters: LoginRecoverPasswordHtmlContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling loginRecoverPasswordHtmlContent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/password-recovery-html-content/{email}`.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * HTML Content for Password Recovery
     * Recover Password Html Content
     */
    async loginRecoverPasswordHtmlContent(requestParameters: LoginRecoverPasswordHtmlContentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.loginRecoverPasswordHtmlContentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset password
     * Reset Password
     */
    async loginResetPasswordRaw(requestParameters: LoginResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['newPassword'] == null) {
            throw new runtime.RequiredError(
                'newPassword',
                'Required parameter "newPassword" was null or undefined when calling loginResetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/reset-password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewPasswordToJSON(requestParameters['newPassword']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Reset password
     * Reset Password
     */
    async loginResetPassword(requestParameters: LoginResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.loginResetPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test access token
     * Test Token
     */
    async loginTestTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/login/test-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Test access token
     * Test Token
     */
    async loginTestToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.loginTestTokenRaw(initOverrides);
        return await response.value();
    }

}
