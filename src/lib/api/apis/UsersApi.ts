/* tslint:disable */
/* eslint-disable */
/**
 * Work Order App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  Message,
  UpdatePassword,
  UserCreate,
  UserPublic,
  UserRegister,
  UserUpdate,
  UserUpdateMe,
  UsersPublic,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MessageFromJSON,
    MessageToJSON,
    UpdatePasswordFromJSON,
    UpdatePasswordToJSON,
    UserCreateFromJSON,
    UserCreateToJSON,
    UserPublicFromJSON,
    UserPublicToJSON,
    UserRegisterFromJSON,
    UserRegisterToJSON,
    UserUpdateFromJSON,
    UserUpdateToJSON,
    UserUpdateMeFromJSON,
    UserUpdateMeToJSON,
    UsersPublicFromJSON,
    UsersPublicToJSON,
} from '../models/index';

export interface UsersCreateUserRequest {
    userCreate: UserCreate;
}

export interface UsersDeleteUserRequest {
    userId: string;
}

export interface UsersReadUserByIdRequest {
    userId: string;
}

export interface UsersReadUsersRequest {
    skip?: number;
    limit?: number;
}

export interface UsersRegisterUserRequest {
    userRegister: UserRegister;
}

export interface UsersUpdatePasswordMeRequest {
    updatePassword: UpdatePassword;
}

export interface UsersUpdateUserRequest {
    userId: string;
    userUpdate: UserUpdate;
}

export interface UsersUpdateUserMeRequest {
    userUpdateMe: UserUpdateMe;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Create new user.
     * Create User
     */
    async usersCreateUserRaw(requestParameters: UsersCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        if (requestParameters['userCreate'] == null) {
            throw new runtime.RequiredError(
                'userCreate',
                'Required parameter "userCreate" was null or undefined when calling usersCreateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateToJSON(requestParameters['userCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Create new user.
     * Create User
     */
    async usersCreateUser(requestParameters: UsersCreateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.usersCreateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a user.
     * Delete User
     */
    async usersDeleteUserRaw(requestParameters: UsersDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersDeleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Delete a user.
     * Delete User
     */
    async usersDeleteUser(requestParameters: UsersDeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.usersDeleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete own user.
     * Delete User Me
     */
    async usersDeleteUserMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/me`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Delete own user.
     * Delete User Me
     */
    async usersDeleteUserMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.usersDeleteUserMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a specific user by id.
     * Read User By Id
     */
    async usersReadUserByIdRaw(requestParameters: UsersReadUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersReadUserById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Get a specific user by id.
     * Read User By Id
     */
    async usersReadUserById(requestParameters: UsersReadUserByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.usersReadUserByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current user.
     * Read User Me
     */
    async usersReadUserMeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Get current user.
     * Read User Me
     */
    async usersReadUserMe(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.usersReadUserMeRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve users.
     * Read Users
     */
    async usersReadUsersRaw(requestParameters: UsersReadUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsersPublic>> {
        const queryParameters: any = {};

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsersPublicFromJSON(jsonValue));
    }

    /**
     * Retrieve users.
     * Read Users
     */
    async usersReadUsers(requestParameters: UsersReadUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsersPublic> {
        const response = await this.usersReadUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create new user without the need to be logged in.
     * Register User
     */
    async usersRegisterUserRaw(requestParameters: UsersRegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        if (requestParameters['userRegister'] == null) {
            throw new runtime.RequiredError(
                'userRegister',
                'Required parameter "userRegister" was null or undefined when calling usersRegisterUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/users/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserRegisterToJSON(requestParameters['userRegister']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Create new user without the need to be logged in.
     * Register User
     */
    async usersRegisterUser(requestParameters: UsersRegisterUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.usersRegisterUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update own password.
     * Update Password Me
     */
    async usersUpdatePasswordMeRaw(requestParameters: UsersUpdatePasswordMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Message>> {
        if (requestParameters['updatePassword'] == null) {
            throw new runtime.RequiredError(
                'updatePassword',
                'Required parameter "updatePassword" was null or undefined when calling usersUpdatePasswordMe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/me/password`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePasswordToJSON(requestParameters['updatePassword']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageFromJSON(jsonValue));
    }

    /**
     * Update own password.
     * Update Password Me
     */
    async usersUpdatePasswordMe(requestParameters: UsersUpdatePasswordMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Message> {
        const response = await this.usersUpdatePasswordMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user.
     * Update User
     */
    async usersUpdateUserRaw(requestParameters: UsersUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling usersUpdateUser().'
            );
        }

        if (requestParameters['userUpdate'] == null) {
            throw new runtime.RequiredError(
                'userUpdate',
                'Required parameter "userUpdate" was null or undefined when calling usersUpdateUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateToJSON(requestParameters['userUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Update a user.
     * Update User
     */
    async usersUpdateUser(requestParameters: UsersUpdateUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.usersUpdateUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update own user.
     * Update User Me
     */
    async usersUpdateUserMeRaw(requestParameters: UsersUpdateUserMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserPublic>> {
        if (requestParameters['userUpdateMe'] == null) {
            throw new runtime.RequiredError(
                'userUpdateMe',
                'Required parameter "userUpdateMe" was null or undefined when calling usersUpdateUserMe().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/users/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateMeToJSON(requestParameters['userUpdateMe']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserPublicFromJSON(jsonValue));
    }

    /**
     * Update own user.
     * Update User Me
     */
    async usersUpdateUserMe(requestParameters: UsersUpdateUserMeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserPublic> {
        const response = await this.usersUpdateUserMeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
